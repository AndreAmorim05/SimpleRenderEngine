#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>

using namespace std;

fstream fout;

vector<char> readFile(const char* filename, bool binary){
    vector<char> res;
    fstream fstream;
    auto type = ios_base::in;
    if (binary)
    {
        type |= ios_base::binary;
    }
    fstream.open(filename, type);
    if (!binary){
        stringstream ss;
        string line;
        while( getline( fstream, line ) ) {
            ss << line << endl;
        }
        for (char c : ss.str()){
            res.push_back(c);
        }
    } else {
        char c;
        while (!fstream.fail()){
            fstream >> c;
            res.push_back(c);
        }
    }
    fstream.close();
    return res;
}

void printRes(vector<char>& r, string resourceName){
    fout << "char "<<resourceName<<"[] = {";
    for (int i=0;i<r.size();i++){
        if (i>0){
            fout<< ',';
        }
        fout << (int)r[i];
    }

    fout << "};"<<std::endl;
}

void printResTxt(vector<char>& r, string resourceName){
    fout << "std::string "<<resourceName<<" = R\"(";
    for (char i : r) {
        fout<< i;
    }
    fout << ")\";"<<std::endl;
}

void printResShader(vector<char>& r, string resourceName){

    fout << "std::make_pair<std::string,std::string>(\""<<resourceName<< "\",R\"(";
    for (char i : r) {
        fout<< i;
    }
    fout << ")\"),\n";;
}

bool isBinary(string filename){
    return filename.find(".jpg") >0 || filename.find(".png") >0;
}

int main(int argc, char * argv[]){
    if (argc<=1){
        std::cout << "Usage:"<<std::endl;
        std::cout << "files_to_cpp [filename1] [resourcename1] [filename2] [resourcename2] ... [outputfile]"<<std::endl;
        std::cout << "files_to_cpp shader [filename1] [resourcename1] [filename2] [resourcename2] ... [outputfile]"<<std::endl;
        return -1;
    }
    fout.open(argv[argc-1], ios::out | ios::app );

    cout << "generating " << argv[argc-1] << endl;
    fout << "// autogenerated by"<<std::endl<<"// files_to_cpp";
    for (int i=1;i<argc;i++){
        fout<<" "<<argv[i];
    }
    fout<<endl;

    if (std::string("shader") == argv[1]){
        fout <<"#include <map>\n"
                "#include <utility>\n"
                "#include <string>\n"
                "\n"
                "std::map<std::string, std::string> builtInShaderSource  {"<<endl;
        for (int i=2;i<argc-1;i=i+2){
            auto filename = argv[i];
            auto resourcename = argv[i+1];
            bool binary = false;
            auto res = readFile(filename, binary);
            for (char r : res){
                cout << r;
            }
            printResShader(res, resourcename);

        }
        fout << "};";
    } else {
        fout<<"namespace { "<<endl;
        for (int i=1;i<argc-1;i=i+2){
            auto filename = argv[i];
            auto resourcename = argv[i+1];
            bool binary = isBinary(filename);
            auto res = readFile(filename, binary);
            if (binary){
                printRes(res, resourcename);
            } else {
                printResTxt(res, resourcename);
            }
        }
        fout<<"}"<<endl;
    }



    fout.flush();
    fout.close();
    return 0;
}